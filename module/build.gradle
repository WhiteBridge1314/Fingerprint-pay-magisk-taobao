apply plugin: 'com.android.library'

android {
    compileSdkVersion rootProject.ext.targetSdkVersion
    defaultConfig {
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        ndk {
            abiFilters "armeabi-v7a", 'arm64-v8a', 'x86', 'x86_64'
        }       
    }
    externalNativeBuild {
        cmake {
            path "src/main/cpp/CMakeLists.txt"
            version "3.9.1"
        }
    }
}

def moduleId = "module_xfingerprint_pay_taobao"
def moduleProp = [
        name       : "指纹支付 - 淘宝",
        version    : "v3.9.6",
        versionCode: "1",
        author     : "Jason Eric",
        description: "让淘宝支持指纹支付 Fingerprint pay for Taobao.",
        api        : 4
]

def magiskModuleProp = [
        id         : "riru-${moduleId.replace('_', '-')}",
        name       : "Riru - ${moduleProp['name']}",
        version    : moduleProp['version'],
        versionCode: moduleProp['versionCode'],
        author     : moduleProp['author'],
        description: moduleProp['description']
]

def outDir = file("$rootDir/out")
def magiskDir = file("$outDir/magisk_module")
def zipName = "magisk-${magiskModuleProp['id']}-${magiskModuleProp['version']}.zip"
def riruDir = "$magiskDir/data/misc/riru/modules/${moduleId}"

import java.nio.file.Files
import java.security.MessageDigest

static def calcSha256(file) {
    def md = MessageDigest.getInstance("SHA-256")
    file.eachByte 4096, { bytes, size ->
        md.update(bytes, 0, size);
    }
    return md.digest().encodeHex()
}

static def renameOrFail(File from, File to) {
    if (!from.renameTo(to)) {
        throw new IOException("Unable reanme file $from to $to")
    }
}

android.libraryVariants.all { variant ->
    def task = variant.assembleProvider.get()
    task.doLast {
        // clear
        delete { delete magiskDir }

        // copy from template
        copy {
            from "$rootDir/template/magisk_module"
            into magiskDir.path
        }
        // copy .git files manually since gradle exclude it by default
        Files.copy(file("$rootDir/template/magisk_module/.gitattributes").toPath(), file("${magiskDir.path}/.gitattributes").toPath())

        // generate module.prop
        def modulePropText = ""
        magiskModuleProp.each { k, v -> modulePropText += "$k=$v\n" }
        modulePropText = modulePropText.trim()
        file("$magiskDir/module.prop").text = modulePropText

        // generate module.prop for Riru
        def riruModulePropText = ""
        moduleProp.each { k, v -> riruModulePropText += "$k=$v\n" }
        riruModulePropText = riruModulePropText.trim()
        file(riruDir).mkdirs()

        // module.prop.new will be renamed to module.prop in post-fs-data.sh
        file("$riruDir/module.prop.new").text = riruModulePropText

        // copy native files
        def nativeOutDir = file("build/intermediates/cmake/$variant.name/obj")

        file("$magiskDir/system").mkdirs()
        file("$magiskDir/system_x86").mkdirs()
        renameOrFail(file("$nativeOutDir/arm64-v8a"), file("$magiskDir/system/lib64"))
        renameOrFail(file("$nativeOutDir/armeabi-v7a"), file("$magiskDir/system/lib"))
        renameOrFail(file("$nativeOutDir/x86_64"), file("$magiskDir/system_x86/lib64"))
        renameOrFail(file("$nativeOutDir/x86"), file("$magiskDir/system_x86/lib"))

        file("$magiskDir/system/framework").mkdirs()
        copy {
            from zipTree('libs/fingerprint-pay-taobao-magisk.apk')
            rename('classes.dex', 'libxfingerprint_pay_taobao.dex')
            into file("$magiskDir/system/framework")
            include 'classes.dex'
        }

        // generate sha1sum
        fileTree("$magiskDir").matching {
            exclude "README.md", "META-INF"
        }.visit { f ->
            if (f.directory) return
            file(f.file.path + ".sha256sum").text = calcSha256(f.file)
        }
    }
    task.finalizedBy zipMagiskMoudle
}

task zipMagiskMoudle(type: Zip) {
    from magiskDir
    archiveName zipName
    destinationDir outDir
}